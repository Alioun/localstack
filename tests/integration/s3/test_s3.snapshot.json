{
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_utf8_key": {
    "recorded-date": "02-06-2022, 11:43:43",
    "recorded-content": {
      "put-object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "ETag": "\"e99a18c428cb38d5f260853678922e03\""
      },
      "get-object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 6,
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_metadata_header_character_decoding": {
    "recorded-date": "31-05-2022, 09:37:56",
    "recorded-content": {
      "head-object": {
        "test_meta_1": "foo",
        "__meta_2": "bar"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_with_content": {
    "recorded-date": "31-05-2022, 09:36:16",
    "recorded-content": {
      "list-objects": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "IsTruncated": false,
        "Marker": "",
        "Contents": [
          {
            "Key": "test-key-0",
            "LastModified": "datetime",
            "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-1",
            "LastModified": "datetime",
            "ETag": "\"70a37754eb5a2e7db8cd887aaf11cda7\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-2",
            "LastModified": "datetime",
            "ETag": "\"282ff2cb3d9dadeb831bb3ba0128f2f4\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-3",
            "LastModified": "datetime",
            "ETag": "\"2b61ddda48445374b35a927b6ae2cd6d\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-4",
            "LastModified": "datetime",
            "ETag": "\"f533f549a84b9d7a381a7ed55c4f46b9\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-5",
            "LastModified": "datetime",
            "ETag": "\"0efcf24eb64fa875c294d05703096b0d\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-6",
            "LastModified": "datetime",
            "ETag": "\"7b1b88bb19a8c5a6a1d53eaa75108b80\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-7",
            "LastModified": "datetime",
            "ETag": "\"698fbf838fdda3065e058190398514f8\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-8",
            "LastModified": "datetime",
            "ETag": "\"96c2178517e273d4001ab7f68fdde969\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-9",
            "LastModified": "datetime",
            "ETag": "\"da51d6e22a1ae095154e69b07eef731b\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          }
        ],
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "MaxKeys": 100,
        "EncodingType": "url"
      },
      "list-buckets": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "Buckets": [],
        "Owner": {
          "DisplayName": "<display-name>",
          "ID": "<owner-id>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_region_header_exists": {
    "recorded-date": "02-06-2022, 11:23:16",
    "recorded-content": {
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        }
      },
      "list_objects_v2": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "IsTruncated": false,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "MaxKeys": 1000,
        "EncodingType": "url",
        "KeyCount": 0
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_multipart": {
    "recorded-date": "02-06-2022, 11:52:47",
    "recorded-content": {
      "get_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 6144,
        "ETag": "\"8eabe9d6b43316e840b079170916c079-1\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object": {
    "recorded-date": "02-06-2022, 11:55:55",
    "recorded-content": {
      "get_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 9,
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_url_metadata": {
    "recorded-date": "02-06-2022, 12:05:29",
    "recorded-content": {
      "head_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 11,
        "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {
          "foo": "bar"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_hash_prefix": {
    "recorded-date": "26-07-2022, 15:37:04",
    "recorded-content": {
      "put-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "ETag": "\"39d0d586a701e199389d954f2d592720\""
      },
      "get-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 8,
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_tagging_empty_list": {
    "recorded-date": "09-08-2022, 15:20:21",
    "recorded-content": {
      "created-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": []
      },
      "updated-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          }
        ]
      },
      "deleted-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": []
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_attributes": {
    "recorded-date": "09-08-2022, 15:35:20",
    "recorded-content": {
      "object-attrs": {
        "ETag": "e92499db864217242396e8ef766079a9",
        "LastModified": "datetime",
        "ObjectSize": 7,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_head_object_fields": {
    "recorded-date": "09-08-2022, 16:38:09",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_after_deleted_in_versioned_bucket": {
    "recorded-date": "09-08-2022, 17:23:32",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "abcdefgh",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "dHbAQTgztqVidv2H01dsECtk0x7LN0CJ",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-delete": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_metadata_replace": {
    "recorded-date": "18-08-2022, 17:31:08",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/javascript",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "another-key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_content_type_and_metadata": {
    "recorded-date": "18-08-2022, 17:52:12",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object_second": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_second_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_multipart_upload_acls": {
    "recorded-date": "19-08-2022, 16:57:09",
    "recorded-content": {
      "bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key0": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key1": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key2": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_object_expiry": {
    "recorded-date": "22-08-2022, 18:02:13",
    "recorded-content": {
      "head-object-expired": {
        "AcceptRanges": "bytes",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-not-yet-expired": {
        "AcceptRanges": "bytes",
        "Body": "foo",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_availability": {
    "recorded-date": "22-08-2022, 20:06:27",
    "recorded-content": {
      "bucket-lifecycle": {
        "Error": {
          "BucketName": "test-bucket-lifecycle",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "bucket-replication": {
        "Error": {
          "BucketName": "test-bucket-lifecycle",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_with_xml_preamble": {
    "recorded-date": "23-08-2022, 12:03:04",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><test/>",
        "ContentLength": 45,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8a793423f1e69103a7056b99e4ad6c0b\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_different_location_constraint": {
    "recorded-date": "23-08-2022, 18:45:59",
    "recorded-content": {
      "get_bucket_location_bucket_1": {
        "LocationConstraint": null,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_2": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_constraint_exc": {
        "Error": {
          "Code": "IllegalLocationConstraintException",
          "Message": "The unspecified location constraint is incompatible for the region specific endpoint this request was sent to."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create_bucket_bucket_3": {
        "Location": "<location>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_3": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_with_anon_credentials": {
    "recorded-date": "24-08-2022, 11:01:27",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "body data",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"53ebc26c3ff5decfe9ffc7bdbaa02459\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_putobject_with_multiple_keys": {
    "recorded-date": "24-08-2022, 19:09:22",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_lifecycle_configuration": {
    "recorded-date": "25-08-2022, 17:08:05",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_lifecycle_configuration_on_bucket_deletion": {
    "recorded-date": "25-08-2022, 17:12:56",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_range_header_body_length": {
    "recorded-date": "25-08-2022, 18:02:59",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 1024,
        "ContentRange": "bytes 0-1023/2048",
        "ContentType": "binary/octet-stream",
        "ETag": "\"7be4229686e4047603196e6edb58692d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_object_tagging": {
    "recorded-date": "26-08-2022, 01:29:53",
    "recorded-content": {
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tag-deletion": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_with_allowed_origins": {
    "recorded-date": "26-08-2022, 15:10:47",
    "recorded-content": {
      "raw-response-headers": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-3": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-4": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4201",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_configurations": {
    "recorded-date": "26-08-2022, 16:34:52",
    "recorded-content": {
      "raw-response-headers": {
        "Accept-Ranges": "bytes",
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "http://localhost:4566",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Accept-Ranges": "bytes",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys_in_non_existing_bucket": {
    "recorded-date": "26-08-2022, 15:41:56",
    "recorded-content": {
      "error-non-existent-bucket": {
        "Error": {
          "BucketName": "non-existent-bucket",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_request_payer": {
    "recorded-date": "26-08-2022, 15:48:13",
    "recorded-content": {
      "put-bucket-request-payment": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-request-payment": {
        "Payer": "Requester",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_exists": {
    "recorded-date": "26-08-2022, 15:53:56",
    "recorded-content": {
      "get-bucket-cors": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "AllowedOrigins": [
              "localhost"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-not-exists": {
        "Error": {
          "BucketName": "bucket-not-exists",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_uppercase_key_names": {
    "recorded-date": "26-08-2022, 16:13:42",
    "recorded-content": {
      "response": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-case-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "camelcasekey",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  }
}
